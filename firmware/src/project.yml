---

# Notes:
# Sample project C code is not presently written to produce a release artifact.
# As such, release build options are disabled.
# This sample, therefore, only demonstrates running a collection of unit tests.
# Using these pages as tutorials
# http://marcelojo.org/test-driven-development-unity-microchip/
# http://www.electronvector.com/blog/add-unit-tests-to-your-current-project-with-ceedling
# https://github.com/ThrowTheSwitch/CeedlingExample_Microchip

:project:
  :use_exceptions: FALSE
  :use_test_preprocessor: :all
  :use_auxiliary_dependencies: TRUE
  :build_root: build
#  :release_build: TRUE
  :test_file_prefix: test_
  :which_ceedling: gem
  :ceedling_version: 1.0.0
  :default_tasks:
    - test:all

#:test_build:
#  :use_assembly: TRUE

#:release_build:
#  :output: MyApp.out
#  :use_assembly: FALSE

:environment:

:extension:
  :executable: .out

:paths:
  :include:
          #    - /opt/microchip/xc32/v2.10/pic32mx/include/**
    - .
  :test:
    - +:test/**
    - -:test/support
  :source:
    - +:.
  :support:
    - test/support
  :libraries: []

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :common: &common_defines 
    - UNITY_INCLUDE_PRINT_FORMATTED
    - UNITY_INT_WIDTH=32
    - CMOCK_MEM_INDEX_TYPE=uint32_t
    - CMOCK_MEM_PTR_AS_INT=uint32_t
    - CMOCK_MEM_ALIGN=1
    - UNITY_EXCLUDE_SETJMP_H
    - __LANGUAGE_C__ 
    - TEST
      #- CMOCK_MEM_SIZE=4096
  :test:
    - *common_defines
    - TEST
  :test_preprocess:
          #    - *common_defines
    - TEST

:tools:
  :test_compiler:
    :executable: gcc
    :arguments:
    - -D$: COLLECTION_DEFINES_TEST_AND_VENDOR
    - -I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR
    - -std=gnu11
    - -c
    - -fmessage-length=0
    - -g
    - -O2
    - ${1}
    - -o "${2}"
    

:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
    - :callback
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8
  :attributes:
    - INLINE
    - STATIC
  :includes:        # This will add these includes to each mock.
    - <GenericTypeDefs.h>

# Add -gcov to the plugins list to make sure of the gcov plugin
# You will need to have gcov and gcovr both installed to make it work.
# For more information on these options, see docs in plugins/gcov
:gcov:
  :reports:
    - HtmlDetailed
  :gcovr:
    :html_medium_threshold: 75
    :html_high_threshold: 90

#:tools:
# Ceedling defaults to using gcc for compiling, linking, etc.
# As [:tools] is blank, gcc will be used (so long as it's in your system path)
# See documentation to configure a given toolchain for use

# LIBRARIES
# These libraries are automatically injected into the build process. Those specified as
# common will be used in all types of builds. Otherwise, libraries can be injected in just
# tests or releases. These options are MERGED with the options in supplemental yaml files.
:libraries:
  :placement: :end
  :flag: "-l${1}"
  :path_flag: "-L ${1}"
  :system: []    # for example, you might list 'm' to grab the math library
  :test: []
  :release: []

:plugins:
  :enabled:
    - module_generator
...
